//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Weapon/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

// PlayerControlsクラスは、InputActionAssetをラップし、入力アクションの管理を行います
public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    // InputActionAssetオブジェクトを格納するプロパティ
    public InputActionAsset asset { get; }

    // コンストラクタでInputActionAssetを初期化します
    public @PlayerControls()
    {
        // JSON形式のInputActionAssetを生成
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""a2464707-8d62-4f9c-a64a-855d39ef8875"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""e1cb28d3-1b2a-4b62-98f2-efa2b39bc165"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3042756a-7a4f-43aa-bb0c-4c376bc82521"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""86bf29ad-9160-4de0-92e3-60d2914be846"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""04018d9c-f4d0-4b4f-946a-968643436232"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0857103d-3c41-4f51-8b57-b78f5392dab0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");

        // Movementアクションマップを取得
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        // Moveアクションを取得
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);

        // Combatアクションマップを取得
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        // Attackアクションを取得
        m_Combat_Attack = m_Combat.FindAction("Attack", throwIfNotFound: true);
    }

    // InputActionAssetを破棄するためのメソッド
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    // バインディングマスクの取得と設定
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    // デバイスの取得と設定
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    // コントロールスキームの取得
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    // 指定したアクションがこのアセットに含まれているか確認
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    // 入力アクションの列挙子を取得
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    // 全ての入力アクションを有効化
    public void Enable()
    {
        asset.Enable();
    }

    // 全ての入力アクションを無効化
    public void Disable()
    {
        asset.Disable();
    }

    // 入力バインディングの列挙子を取得
    public IEnumerable<InputBinding> bindings => asset.bindings;

    // 指定した名前またはIDの入力アクションを検索
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    // 指定したバインディングマスクに一致するバインディングを検索し、関連するアクションを返す
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movementアクションマップの定義
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;

    // Movementアクションマップの操作を提供する構造体
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }

        // Moveアクションのコールバックを追加する
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        // Moveアクションのコールバックを登録解除する
        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        // 特定のコールバックを削除する
        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        // コールバックを設定する
        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Combatアクションマップの定義
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_Attack;

    // Combatアクションマップの操作を提供する構造体
    public struct CombatActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Combat_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }

        // Attackアクションのコールバックを追加する
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        // Attackアクションのコールバックを登録解除する
        private void UnregisterCallbacks(ICombatActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        // 特定のコールバックを削除する
        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        // コールバックを設定する
        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Movementアクションマップ用のコールバックインターフェース
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }

    // Combatアクションマップ用のコールバックインターフェース
    public interface ICombatActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
}
